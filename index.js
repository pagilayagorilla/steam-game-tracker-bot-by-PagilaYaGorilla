require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const NodeCache = require('node-cache');
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const STORE_API_URL = 'https://store.steampowered.com/api';
let BOT_USERNAME = process.env.BOT_USERNAME;

if (!TELEGRAM_BOT_TOKEN) {
  console.error('–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ —Ñ–∞–π–ª–µ .env');
  process.exit(1);
}

if (!BOT_USERNAME) {
  console.warn('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: BOT_USERNAME –Ω–µ —É–∫–∞–∑–∞–Ω –≤ —Ñ–∞–π–ª–µ .env');
  BOT_USERNAME = 'your_bot_username';
}

const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { 
  polling: true,
  onlyFirstMatch: true
});
const cache = new NodeCache({ stdTTL: 86400 });
const userSubscriptions = new Map();
const userStates = new Map();
const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω... by PagilaYaGorilla');

const mainMenu = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: 'üîç –ü–æ–∏—Å–∫ –∏–≥—Ä—ã', switch_inline_query_current_chat: '' },
        { text: 'üéÆ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'my_subs' }
      ],
      [
        { text: 'üí∞ –¢–æ–ø —Å–∫–∏–¥–æ–∫', callback_data: 'top_deals' },
        { text: 'üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã', callback_data: 'free_games' }
      ],
      [
        { text: 'üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', callback_data: 'recommendations' },
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }
      ],
      [
        { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }
      ]
    ]
  }
};

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const welcomeText = `
üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Steam Price Tracker Bot!</b>

–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ –∏–≥—Ä—ã –≤ Steam
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–∏–¥–∫–∞—Ö
‚Ä¢ –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–∞—Ö
‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:</b>
  `;

  bot.sendMessage(chatId, welcomeText, {
    parse_mode: 'HTML',
    reply_markup: mainMenu.reply_markup
  });
});

bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const data = callbackQuery.data;

  try {
    await bot.deleteMessage(chatId, messageId);
  } catch (error) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
  }

  switch (data) {
    case 'main_menu':
      showMainMenu(chatId);
      break;
    case 'my_subs':
      showSubscriptions(chatId);
      break;
    case 'top_deals':
      showTopDeals(chatId);
      break;
    case 'free_games':
      showFreeGames(chatId);
      break;
    case 'recommendations':
      showRecommendations(chatId);
      break;
    case 'stats':
      showStats(chatId);
      break;
    case 'help':
      showHelp(chatId);
      break;
    default:
      if (data.startsWith('game_')) {
        const appId = data.split('_')[1];
        showGameInfo(chatId, appId);
      } else if (data.startsWith('sub_')) {
        const appId = data.split('_')[1];
        subscribeToGame(chatId, appId);
      } else if (data.startsWith('unsub_')) {
        const appId = data.split('_')[1];
        unsubscribeFromGame(chatId, appId);
      } else if (data.startsWith('info_')) {
        const appId = data.split('_')[1];
        showGameInfo(chatId, appId);
      }
  }

  await bot.answerCallbackQuery(callbackQuery.id);
});

function showMainMenu(chatId) {
  const menuText = `
<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:
  `;

  bot.sendMessage(chatId, menuText, {
    parse_mode: 'HTML',
    reply_markup: mainMenu.reply_markup
  });
}

async function showSubscriptions(chatId) {
  const subscriptions = userSubscriptions.get(chatId);
  
  if (!subscriptions || subscriptions.size === 0) {
    return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—ã.', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîç –ü–æ–∏—Å–∫ –∏–≥—Ä', switch_inline_query_current_chat: '' }],
          [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
        ]
      }
    });
  }
  
  let message = 'üéÆ <b>–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n';
  const keyboard = [];
  
  subscriptions.forEach((gameInfo, appId) => {
    const cachedGame = cache.get(`game_${appId}`);
    message += `‚ñ™Ô∏è ${cachedGame ? cachedGame.name : gameInfo.name}\n`;
    keyboard.push([
      { 
        text: `${cachedGame ? cachedGame.name : gameInfo.name}`, 
        callback_data: `info_${appId}` 
      }
    ]);
  });
  
  keyboard.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]);
  
  bot.sendMessage(chatId, message, {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: keyboard
    }
  });
}

async function showGameInfo(chatId, appId) {
  try {
    const response = await axios.get(`${STORE_API_URL}/appdetails/`, {
      params: { appids: appId, l: 'russian' }
    });
    
    if (!response.data[appId].success) {
      return bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'my_subs' }]
          ]
        }
      });
    }
    
    const game = response.data[appId].data;
    const isSubscribed = userSubscriptions.get(chatId)?.has(appId);
    
    const message = `
üéÆ <b>${game.name}</b>

üìÖ <b>–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞:</b> ${game.release_date?.date || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> ${game.metacritic?.score || '–ù/–ê'}
üíæ <b>–ñ–∞–Ω—Ä—ã:</b> ${game.genres?.map(g => g.description).join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
üë• <b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> ${game.developers?.join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üí∞ <b>–¶–µ–Ω–∞:</b> ${game.price_overview ? `${game.price_overview.final/100}‚ÇΩ` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}
${game.price_overview ? `üìâ <b>–°–∫–∏–¥–∫–∞:</b> ${game.price_overview.discount_percent}%` : ''}

${game.short_description || ''}
    `;
    
    const keyboard = [];
    
    if (isSubscribed) {
      keyboard.push([{ text: '‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è', callback_data: `unsub_${appId}` }]);
    } else {
      keyboard.push([{ text: '‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', callback_data: `sub_${appId}` }]);
    }

    keyboard.push([{ text: 'üîº –û—Ç–∫—Ä—ã—Ç—å –≤ Steam', url: `https://store.steampowered.com/app/${appId}` }]);
    
    keyboard.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º', callback_data: 'my_subs' }]);
    
    let options = {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: keyboard
      }
    };
    
    if (game.screenshots && game.screenshots.length > 0) {
      options.caption = message;
      options.parse_mode = 'HTML';
      
      return bot.sendPhoto(chatId, game.screenshots[0].path_thumbnail, options);
    }
    
    bot.sendMessage(chatId, message, options);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ.', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'my_subs' }]
        ]
      }
    });
  }
}

async function showTopDeals(chatId) {
  try {
    const response = await axios.get('https://store.steampowered.com/api/featuredcategories?cc=RU&l=russian');
    const specials = response.data.specials?.items || [];
    
    if (specials.length === 0) {
      return bot.sendMessage(chatId, '–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
          ]
        }
      });
    }
    
    let message = 'üî• <b>–¢–æ–ø —Å–∫–∏–¥–æ–∫ –≤ Steam:</b>\n\n';
    const keyboard = [];
    
    specials.slice(0, 5).forEach(game => {
      const discount = game.discount_percent || 0;
      const finalPrice = game.final_price / 100;
      const originalPrice = game.original_price / 100;
      
      message += `üéÆ <b>${game.name}</b>\n`;
      message += `üí∞ <s>${originalPrice}‚ÇΩ</s> ${finalPrice}‚ÇΩ (-${discount}%)\n\n`;
      
      keyboard.push([
        { 
          text: `‚úÖ ${game.name} (${discount}%)`, 
          callback_data: `info_${game.id}` 
        }
      ]);
    });
    
    keyboard.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]);
    
    bot.sendMessage(chatId, message, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ —Å–∫–∏–¥–æ–∫:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Å–∫–∏–¥–æ–∫.', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
        ]
      }
    });
  }
}

async function showFreeGames(chatId) {
  try {
    const response = await axios.get('https://store.steampowered.com/api/featuredcategories?cc=RU&l=russian');
    
    let freeGames = [];
    
    const sectionsToCheck = [
      'featured_win', 'featured_mac', 'featured_linux',
      'specials', 'coming_soon', 'new_releases', 'top_sellers'
    ];
    
    for (const section of sectionsToCheck) {
      if (response.data[section] && response.data[section].items) {
        const gamesInSection = response.data[section].items;
        const freeInSection = gamesInSection.filter(game => game.final_price === 0);
        freeGames = freeGames.concat(freeInSection);
      }
    }
    
    if (freeGames.length === 0) {
      for (const section of sectionsToCheck) {
        if (response.data[section] && response.data[section].items) {
          freeGames = freeGames.concat(response.data[section].items.slice(0, 2));
        }
      }
      
      if (freeGames.length === 0) {
        return bot.sendMessage(chatId, '–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä.', {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
            ]
          }
        });
      }
      
      let message = 'üéÆ <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–≥—Ä—ã:</b>\n\n';
      const keyboard = [];
      
      const uniqueGames = [];
      const seenIds = new Set();
      
      for (const game of freeGames) {
        if (!seenIds.has(game.id)) {
          seenIds.add(game.id);
          uniqueGames.push(game);
          if (uniqueGames.length >= 5) break;
        }
      }
      
      uniqueGames.forEach(game => {
        const price = game.final_price > 0 ? `${game.final_price/100}‚ÇΩ` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ';
        message += `üéÆ <b>${game.name}</b>\n`;
        message += `üí∞ ${price}\n`;
        message += `‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${game.metacritic_score || '–ù/–ê'}\n\n`;
        
        keyboard.push([
          { 
            text: `‚úÖ ${game.name.substring(0, 15)}${game.name.length > 15 ? '...' : ''}`, 
            callback_data: `info_${game.id}` 
          }
        ]);
      });
      
      keyboard.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]);
      
      return bot.sendMessage(chatId, message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
    }
    
    let message = 'üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã –≤ Steam:</b>\n\n';
    const keyboard = [];
    const uniqueGames = [];
    const seenIds = new Set();
    
    for (const game of freeGames) {
      if (!seenIds.has(game.id)) {
        seenIds.add(game.id);
        uniqueGames.push(game);
      }
    }
    
    uniqueGames.slice(0, 5).forEach(game => {
      message += `üéÆ <b>${game.name}</b>\n`;
      message += `‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${game.metacritic_score || '–ù/–ê'}\n\n`;
      
      keyboard.push([
        { 
          text: `‚úÖ ${game.name.substring(0, 15)}${game.name.length > 15 ? '...' : ''}`, 
          callback_data: `info_${game.id}` 
        }
      ]);
    });
    
    keyboard.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]);
    
    bot.sendMessage(chatId, message, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä.', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
        ]
      }
    });
  }
}

async function showRecommendations(chatId) {

    try {
    const response = await axios.get('https://store.steampowered.com/api/featuredcategories?cc=RU&l=russian');
    let popularGames = [];
    const possibleSections = [
      'featured_win', 'featured_mac', 'featured_linux',
      'specials', 'top_sellers', 'new_releases'
    ];
    
    for (const section of possibleSections) {
      if (response.data[section] && response.data[section].items) {
        popularGames = popularGames.concat(response.data[section].items);
        if (popularGames.length >= 10) break;
      }
    }
    
    if (popularGames.length === 0) {
      return bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
          ]
        }
      });
    }
    
    let message = 'üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–≥—Ä—ã:</b>\n\n';
    const keyboard = [];
    
    popularGames.slice(0, 5).forEach(game => {
      const price = game.final_price > 0 ? `${game.final_price/100}‚ÇΩ` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ';
      const discount = game.discount_percent > 0 ? ` (—Å–∫–∏–¥–∫–∞ ${game.discount_percent}%)` : '';
      
      message += `üéÆ <b>${game.name}</b>\n`;
      message += `üí∞ ${price}${discount}\n`;
      message += `‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${game.metacritic_score || '–ù/–ê'}\n\n`;
      
      keyboard.push([
        { 
          text: `‚ÑπÔ∏è ${game.name.substring(0, 15)}${game.name.length > 15 ? '...' : ''}`, 
          callback_data: `info_${game.id}` 
        }
      ]);
    });
    
    keyboard.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]);
    
    bot.sendMessage(chatId, message, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
        ]
      }
    });
  }
}

function showStats(chatId) {
  const totalUsers = userSubscriptions.size;
  let totalSubscriptions = 0;
  
  userSubscriptions.forEach(subs => {
    totalSubscriptions += subs.size;
  });
  
  const message = `
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}
üéÆ –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: ${totalSubscriptions}
üìà –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${totalUsers > 0 ? (totalSubscriptions / totalUsers).toFixed(1) : 0}
  `;
  
  bot.sendMessage(chatId, message, {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
      ]
    }
  });
}

function showHelp(chatId) {
  const message = `
‚ùì <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ üîç <b>–ü–æ–∏—Å–∫ –∏–≥—Ä—ã</b> - –Ω–∞–π–¥–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
‚Ä¢ üéÆ <b>–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∏–≥—Ä
‚Ä¢ üí∞ <b>–¢–æ–ø —Å–∫–∏–¥–æ–∫</b> - –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è Steam
‚Ä¢ üÜì <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã</b> - —Ç–µ–∫—É—â–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–∏—Å–∫ –∏–≥—Ä—ã" –¥–ª—è –ø–æ–∏—Å–∫–∞
2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–≥—Ä—É –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞
3. –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
4. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã!

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/trackgame [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –ü–æ–∏—Å–∫ –∏–≥—Ä—ã
/mysubscriptions - –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏
  `;
  
  bot.sendMessage(chatId, message, {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
      ]
    }
  });
}

async function subscribeToGame(chatId, appId) {
  try {
    const response = await axios.get(`${STORE_API_URL}/appdetails/`, {
      params: { appids: appId, l: 'russian' }
    });
    
    if (!response.data[appId].success) {
      throw new Error('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    const game = response.data[appId].data;
    
    if (!userSubscriptions.has(chatId)) {
      userSubscriptions.set(chatId, new Map());
    }
    
    userSubscriptions.get(chatId).set(appId, {
      name: game.name,
      initialPrice: game.price_overview ? game.price_overview.final : 0,
      lastChecked: Date.now()
    });
    
    cache.set(`game_${appId}`, {
      name: game.name,
      price: game.price_overview ? game.price_overview.final : 0
    });
    
    showGameInfo(chatId, appId);
    
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∏–≥—Ä—É:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'my_subs' }]
        ]
      }
    });
    return false;
  }
}

function unsubscribeFromGame(chatId, appId) {
  if (userSubscriptions.has(chatId)) {
    const hadGame = userSubscriptions.get(chatId).delete(appId);
    
    if (hadGame) {
      bot.sendMessage(chatId, `–ò–≥—Ä–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö.`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º', callback_data: 'my_subs' }]
          ]
        }
      });
    }
  }
}

bot.on('inline_query', async (inlineQuery) => {
  const query = inlineQuery.query;
  const offset = inlineQuery.offset || '0';
  
  if (!query || query.length < 3) {
    return bot.answerInlineQuery(inlineQuery.id, [], {
      switch_pm_text: '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞',
      switch_pm_parameter: 'start',
      cache_time: 0
    });
  }
  
  try {
    const response = await axios.get('https://store.steampowered.com/api/storesearch', {
      params: {
        term: query,
        cc: 'RU',
        l: 'ru',
        limit: 10
      }
    });
    
    if (!response.data.items || response.data.items.length === 0) {
      return bot.answerInlineQuery(inlineQuery.id, [], {
        switch_pm_text: '–ò–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
        switch_pm_parameter: 'start',
        cache_time: 0
      });
    }
    
    const results = response.data.items.map((game, index) => {
      const price = game.price ? `${game.price.final / 100}‚ÇΩ` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ';
      const discount = game.price && game.price.discount_percent > 0 ? ` (-${game.price.discount_percent}%)` : '';
      
      return {
        type: 'article',
        id: index.toString(),
        title: game.name,
        description: `${price}${discount}`,
        thumb_url: game.tiny_image,
        input_message_content: {
          message_text: `/trackgame_select ${game.id}`
        },
        reply_markup: {
          inline_keyboard: [[
            {
              text: '–í—ã–±—Ä–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É',
              callback_data: `select_${game.id}`
            }
          ]]
        }
      };
    });
    
    bot.answerInlineQuery(inlineQuery.id, results, {
      cache_time: 0,
      is_personal: true
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä:', error);
    bot.answerInlineQuery(inlineQuery.id, [], {
      switch_pm_text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ',
      switch_pm_parameter: 'start',
      cache_time: 0
    });
  }
});

bot.onText(/\/trackgame_select (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const appId = match[1];
  
  try {
    await bot.deleteMessage(chatId, msg.message_id);
  } catch (error) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
  }
  
  await subscribeToGame(chatId, appId);
});

setInterval(async () => {
  console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –Ω–∞ –∏–≥—Ä—ã...');
  
  for (let [chatId, subscriptions] of userSubscriptions) {
    for (let [appId, gameInfo] of subscriptions) {
      try {
        await delay(2000);
        
        const response = await axios.get(`${STORE_API_URL}/appdetails/`, {
          params: { appids: appId, l: 'russian' }
        });
        
        if (response.data[appId].success) {
          const game = response.data[appId].data;
          const newPrice = game.price_overview ? game.price_overview.final : 0;
          const oldPrice = gameInfo.initialPrice;
          
          if (newPrice < oldPrice) {
            const discount = Math.round((1 - newPrice / oldPrice) * 100);
            const message = `
üéÆ <b>${game.name} —Å–æ —Å–∫–∏–¥–∫–æ–π ${discount}%!</b>

üíµ <b>–ù–æ–≤–∞—è —Ü–µ–Ω–∞:</b> ${newPrice / 100}‚ÇΩ
üìâ <b>–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞:</b> ${oldPrice / 100}‚ÇΩ
üí∞ <b>–≠–∫–æ–Ω–æ–º–∏—è:</b> ${(oldPrice - newPrice) / 100}‚ÇΩ

üõí <a href="https://store.steampowered.com/app/${appId}">–ö—É–ø–∏—Ç—å –≤ Steam</a>
            `;
            
            bot.sendMessage(chatId, message, {
              parse_mode: 'HTML',
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üõí –ü–µ—Ä–µ–π—Ç–∏ –∫ –∏–≥—Ä–µ', url: `https://store.steampowered.com/app/${appId}` }],
                  [{ text: '‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è', callback_data: `unsub_${appId}` }]
                ]
              }
            });
            
            gameInfo.initialPrice = newPrice;
            gameInfo.lastChecked = Date.now();
          }
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–Ω—ã –¥–ª—è –∏–≥—Ä—ã', appId, error.message);
      }
    }
  }
}, 24 * 60 * 60 * 1000); 

bot.onText(/\/trackgame (.+)?/, async (msg, match) => {
  const chatId = msg.chat.id;
  const query = match[1];
  
  if (!query) {
    return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /trackgame');
  }
  
  bot.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–≥—Ä—ã', {
    reply_markup: {
      inline_keyboard: [[
        {
          text: 'üîç –ù–∞–π—Ç–∏ –∏–≥—Ä—É',
          switch_inline_query_current_chat: query
        }
      ]]
    }
  });
});

bot.onText(/\/mysubscriptions/, (msg) => {
  const chatId = msg.chat.id;
  showSubscriptions(chatId);
});

bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  showHelp(chatId);
});
